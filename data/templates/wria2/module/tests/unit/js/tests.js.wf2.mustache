/*jshint maxlen: 1000*/

/*
 * For more information on Y.Test, see http://yuilibrary.com/yui/docs/test/
 * or read chapters 12.3 - 12.9 of the YUI Cookbook
 */

YUI.add('module-tests', function(Y) {

  var suite,
    Assert = Y.Assert;
    /*
     * Additional var's that could be referenced may include common config options,
     * templates, or any other often used strings/ values
     */

  suite = new Y.Test.Suite('{{namespace}} {{className}}');

  suite.add(new Y.Test.Case({
    /*
     * The name property is automatically applied to the test case so that it can
     * be distinguished from other test cases that may be run during the same cycle.
     * Test Names should be WF2 ClassName: Type of Test
     */
    name: '{{namespace}} {{className}}: Default Test',

    /*
     * Specifies tests that "should" be doing something other than the expected.
     * This is optional and can be removed if not used.
     */
    _should: {

      /*
       * Tests listed in here should fail, meaning that if they fail, the test
       * has passed. This is used mostly for YuiTest to test itself, but may
       * be helpful in other cases.
       */
      fail: {

        //the test named "testFail" should fail
        testFail: true

      },

      /*
       * Tests listed here should throw an error of some sort. If they throw an
       * error, then they are considered to have passed.
       */
      error: {

        /*
         * You can specify "true" for each test, in which case any error will
         * cause the test to pass.
         */
        testGenericError: true,

        /*
         * You can specify an error message, in which case the test passes only
         * if the error thrown matches the given message.
         */
        testStringError: "I'm a specific error message.",
        testStringError2: "I'm a specific error message.",

        /*
         * You can also specify an error object, in which case the test passes only
         * if the error thrown is on the same type and has the same message.
         */
        testObjectError: new TypeError("Number expected."),
        testObjectError2: new TypeError("Number expected."),
        testObjectError3: new TypeError("Number expected.")

      },

      /*
       * Tests listed here should be ignored when the test case is run. For these tests,
       * setUp() and tearDown() are not called. Useful for test cases that are not working or
       * the functionality is being re-engineered and so it shouldn't be tested at this time.
       */
      ignore : {

        testIgnore: true

      }
    },

    /*
     * As each test method is called, it may be necessary to setup information before it's
     * run and then potentially clean up that information after the test is run. The setUp()
     * method is run before each and every test in the test case and likewise the tearDown()
     * method is run after each test is run. These methods should be used in conjunction to
     * create objects before a test is run and free up memory after the test is run.
     */
    setUp: function () {
      /* If necessary, you can render your widget in the `example` srcNode that is already provided
       * in the index.html
       */
      this.m = new Y.WF2.{{className}}();
    },

    tearDown: function () {
      this.m.destroy();
      this.m = null;
    },

    /*
     * Tests case names should be a sentence containing the word `should` and at least one space
     * that describes the test's purpose
     */
    '{{className}} should be an instance of {{namespace}}.{{className}}': function () {
      // The error message provided if the test fails should describe the failure, not that it failed
      Assert.isInstanceOf(Y.{{namespace}}.{{className}}, this.m, '{{className}} is not an instance of {{namespace}}.{{classname}}');
    },

    '{{className}} has proper unit tests': function () {
      Y.Assert.fail();
    }
  }));

  Y.Test.Runner.add(suite);

});
